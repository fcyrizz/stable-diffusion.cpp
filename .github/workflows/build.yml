name: CI

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create new release"
        required: true
        type: boolean
  push:
    branches:
      - master
      - ci
    paths:
      [
        ".github/workflows/**",
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      [
        "**/CMakeLists.txt",
        "**/Makefile",
        "**/*.h",
        "**/*.hpp",
        "**/*.c",
        "**/*.cpp",
        "**/*.cu",
      ]

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  ubuntu-22_04-cmake:
    runs-on: ubuntu-22.04

    steps:
      - name: Clone
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zip cmake git
          sudo apt-get install -y g++-10 gcc-10
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
          gcc --version
          g++ --version

      - name: Install CUDA 12
        run: |
         sudo apt-get install -y wget gnupg
         wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
         sudo dpkg -i cuda-keyring_1.1-1_all.deb
         sudo apt-get update
         sudo apt-get install -y cuda-toolkit-12-2
         # Add CUDA to PATH
         echo "export PATH=/usr/local/cuda-12.2/bin:\$PATH" >> $GITHUB_ENV
         echo "export LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64:\$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir build
          cd build
          cmake .. -DSD_CUDA=ON -DSD_BUILD_SHARED_LIBS=ON \
           -DCMAKE_CUDA_STANDARD=17 \
           -DCMAKE_CUDA_ARCHITECTURES="70;75;80;86;89" \
           -DCMAKE_C_COMPILER=/usr/bin/gcc-10 \
           -DCMAKE_CXX_COMPILER=/usr/bin/g++-10
          cmake --build . --config Release --target sd -j$(nproc)

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Fetch system info
        id: system-info
        run: |
          echo "CPU_ARCH=$(uname -m)" >> "$GITHUB_OUTPUT"
          echo "OS_NAME=$(lsb_release -s -i)" >> "$GITHUB_OUTPUT"
          echo "OS_VERSION=$(lsb_release -s -r)" >> "$GITHUB_OUTPUT"
          echo "OS_TYPE=$(uname -s)" >> "$GITHUB_OUTPUT"

      - name: Pack artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          cp ggml/LICENSE ./build/bin/ggml.txt
          cp LICENSE ./build/bin/stable-diffusion.cpp.txt
          zip -j sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}-cu12.zip ./build/bin/*

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}-cu12.zip
          path: |
            sd-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-${{ steps.system-info.outputs.OS_TYPE }}-${{ steps.system-info.outputs.OS_NAME }}-${{ steps.system-info.outputs.OS_VERSION }}-${{ steps.system-info.outputs.CPU_ARCH }}-cu12.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-22.04
    needs: [ubuntu-22_04-cmake]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact
          pattern: sd-*
          merge-multiple: true

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}

      - name: Upload release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/${file}`)
                });
              }
            }
